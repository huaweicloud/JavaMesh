/*
 * Copyright (C) 2023-2024 Sermant Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.huaweicloud.sermant.core.event;

import java.util.Arrays;
import java.util.Objects;
import java.util.logging.LogRecord;

/**
 * Logo info
 *
 * @author luanwenfei
 * @since 2023-03-08
 */
public class LogInfo {
    private String logLevel;

    private String logMessage;

    private String logClass;

    private String logMethod;

    private int logLineNumber;

    private int logThreadId;

    private String logThrowable;

    /**
     * Constructor for logRecord
     *
     * @param logRecord logRecord
     */
    public LogInfo(LogRecord logRecord) {
        this.logLevel = logRecord.getLevel().getName();
        this.logMessage = logRecord.getMessage();
        this.logClass = logRecord.getSourceClassName();
        this.logMethod = logRecord.getSourceMethodName();
        Arrays.stream(Thread.currentThread().getStackTrace()).filter(traceElement -> traceElement.getClassName()
                    .equals(logRecord.getSourceClassName()) && traceElement.getMethodName()
                    .equals(logRecord.getSourceMethodName())).findFirst().ifPresent(traceElement ->
                    this.logLineNumber = traceElement.getLineNumber());
        this.logThreadId = logRecord.getThreadID();
        if (logRecord.getThrown() != null) {
            this.logThrowable = logRecord.getThrown().toString();
        }
    }

    public String getLogLevel() {
        return logLevel;
    }

    public void setLogLevel(String logLevel) {
        this.logLevel = logLevel;
    }

    public String getLogMessage() {
        return logMessage;
    }

    public void setLogMessage(String logMessage) {
        this.logMessage = logMessage;
    }

    public String getLogClass() {
        return logClass;
    }

    public void setLogClass(String logClass) {
        this.logClass = logClass;
    }

    public String getLogMethod() {
        return logMethod;
    }

    public void setLogMethod(String logMethod) {
        this.logMethod = logMethod;
    }

    public int getLogThreadId() {
        return logThreadId;
    }

    public void setLogThreadId(int logThreadId) {
        this.logThreadId = logThreadId;
    }

    public String getLogThrowable() {
        return logThrowable;
    }

    public void setLogThrowable(String logThrowable) {
        this.logThrowable = logThrowable;
    }

    public int getLogLineNumber() {
        return logLineNumber;
    }

    public void setLogLineNumber(int logLineNumber) {
        this.logLineNumber = logLineNumber;
    }

    @Override
    public String toString() {
        return "LogInfo{" + "logLevel='" + logLevel + '\'' + ", logMessage='" + logMessage + '\'' + ", logClass='"
                + logClass + '\'' + ", logMethod='" + logMethod + '\'' + ", logLineNumber=" + logLineNumber
                + ", logThreadId=" + logThreadId + ", throwable=" + logThrowable + '}';
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        LogInfo logInfo = (LogInfo) obj;
        return logLineNumber == logInfo.logLineNumber && logThreadId == logInfo.logThreadId
                && Objects.equals(logLevel, logInfo.logLevel) && Objects.equals(logClass, logInfo.logClass)
                && Objects.equals(logMethod, logInfo.logMethod) && Objects.equals(logThrowable, logInfo.logThrowable);
    }

    /**
     * Hashcode is generated by log level, class, method, line number and thread ID.
     * Hashcode is used to avoid duplicated events and log alarm storms in log event reporting
     *
     * @return hashcode
     */
    @Override
    public int hashCode() {
        return Objects.hash(logLevel, logClass, logMethod, logLineNumber, logThreadId, logThrowable);
    }
}