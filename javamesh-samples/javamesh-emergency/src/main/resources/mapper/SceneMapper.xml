<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huawei.emergency.mapper.SceneMapper">
    <resultMap id="SceneMap" type="com.huawei.emergency.entity.SceneEntity">
        <result column="scene_id" property="sceneId" jdbcType="INTEGER"/>
        <result column="scene_name" property="sceneName" jdbcType="VARCHAR"/>
        <result column="scene_description" property="sceneDescription" jdbcType="VARCHAR"/>
        <result column="scene_user" property="sceneUser" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="RelationMap" type="com.huawei.emergency.entity.SceneScriptRelationEntity">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="scene_id" property="sceneId" jdbcType="INTEGER"/>
        <result column="script_name" property="scriptName" jdbcType="VARCHAR"/>
        <result column="script_user" property="scriptUser" jdbcType="VARCHAR"/>
        <result column="execution_mode" property="executionMode" jdbcType="VARCHAR"/>
        <result column="server_user" property="serverUser" jdbcType="VARCHAR"/>
        <result column="server_ip" property="serverIp" jdbcType="VARCHAR"/>
        <result column="server_port" property="serverPort" jdbcType="VARCHAR"/>
        <result column="script_sequence" property="scriptSequence" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="RelationDetailsMap" type="com.huawei.emergency.dto.Task">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="detail_id" property="detailId" jdbcType="INTEGER"/>
        <result column="script_name" property="scriptName" jdbcType="VARCHAR"/>
        <result column="user_name" property="scriptUser" jdbcType="VARCHAR"/>
        <result column="submit_info" property="submitInfo" jdbcType="VARCHAR"/>
        <result column="execution_mode" property="executionMode" jdbcType="VARCHAR"/>
        <result column="server_user" property="serverUser" jdbcType="VARCHAR"/>
        <result column="server_ip" property="serverIp" jdbcType="VARCHAR"/>
        <result column="server_port" property="serverPort" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="listScene" parameterType="com.huawei.emergency.dto.SceneListParam" resultMap="SceneMap">
        SELECT scene_id,scene_name,scene_description,scene_user,create_time,update_time
        FROM scene
        <where>
            <if test="userName!='admin'">
                scene_user = #{userName}
            </if>
            <choose>
                <when test="keywords!=null and keywords!='' ">
                    AND scene_name LIKE CONCAT('%',#{keywords},'%')
                </when>
                <when test="sceneUser!=null">
                    AND scene_user in
                    <foreach collection="sceneUser" item="sceneUser" index="index" open="(" close=")" separator=",">
                        #{sceneUser}
                    </foreach>
                </when>
            </choose>
        </where>
    </select>

    <insert id="createScene" parameterType="com.huawei.emergency.entity.SceneEntity">
        INSERT INTO scene (scene_name, scene_description, scene_user, create_time, update_time)
        VALUES (#{sceneName}, #{sceneDescription}, #{sceneUser}, #{createTime}, #{updateTime})
    </insert>

    <select id="countBySceneName" parameterType="String" resultType="Integer">
        SELECT COUNT(1)
        FROM scene
        WHERE scene_name = #{sceneName}
          AND scene_user = #{sceneUser}
    </select>

    <select id="countRelation" parameterType="Integer" resultType="Integer">
        SELECT COUNT(1)
        FROM scene_script_relation
        WHERE scene_id = #{sceneId}
    </select>

    <select id="getSequenceBySceneId" parameterType="Integer" resultType="Integer">
        SELECT ifnull(script_sequence, 0) as script_sequence
        FROM scene_script_relation
        WHERE scene_id = #{sceneId}
        ORDER BY script_sequence DESC LIMIT 1
    </select>

    <insert id="addScriptToScene" parameterType="com.huawei.emergency.dto.AddScriptToSceneParam">
        <selectKey keyProperty="id" order="AFTER" resultType="Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO scene_script_relation
        (scene_id,script_name,script_user,execution_mode,server_user,server_ip,server_port,script_sequence)
        VALUES
        (#{sceneId},#{scriptName},#{scriptUser},#{executionModeInt},#{serverUser},#{serverIp},#{serverPort},#{scriptSequence})
    </insert>

    <select id="selectRelationById" parameterType="Integer"
            resultMap="RelationMap">
        SELECT id,
               scene_id,
               script_name,
               script_user,
               CASE execution_mode WHEN 0 THEN 'local' WHEN 1 THEN 'remote' END AS execution_mode,
               server_user,
               server_ip,
               server_port,
               script_sequence
        FROM scene_script_relation
        WHERE id = #{id}
    </select>

    <delete id="deleteScriptFromScene" parameterType="Integer">
        DELETE
        FROM scene_script_relation
        WHERE id = #{id}
    </delete>

    <update id="updateSceneTime">
        UPDATE scene
        SET update_time = #{timestamp}
        WHERE scene_id = #{sceneId}
    </update>

    <select id="accountExecuteStatus" parameterType="Integer" resultType="Integer">
        SELECT count(1)
        FROM history_details
        WHERE scene_id = #{sceneId}
          AND status in (0, 1)
    </select>

    <select id="selectSceneBySceneId" parameterType="Integer" resultMap="SceneMap">
        SELECT scene_id, scene_name, scene_description, scene_user, create_time, update_time
        FROM scene
        WHERE scene_id = #{sceneId}
    </select>

    <select id="selectRunningSceneInfo" parameterType="Integer" resultMap="RelationDetailsMap">
        SELECT ssr.id,
               tmp.id as detail_id,
               s.script_name,
               s.user_name,
               s.submit_info,
               CASE
                   ssr.execution_mode
                   WHEN 0 THEN
                       'local'
                   WHEN 1 THEN
                       'remote'
                   END AS execution_mode,
               ssr.server_ip,
               ssr.server_port,
               ssr.server_user,
               CASE
                   tmp.STATUS
                   WHEN 0 THEN
                       'pending'
                   WHEN 1 THEN
                       'running'
                   WHEN 2 THEN
                       'success'
                   WHEN 3 THEN
                       'cancel'
                   WHEN 4 THEN
                       'fail'
                   END AS status
        FROM (
                 SELECT id,
                        relation_id,
                        STATUS
                 FROM history_details
                 WHERE history_id = (SELECT MAX(history_id) FROM history WHERE scene_id = #{sceneId})) tmp
                 INNER JOIN scene_script_relation ssr ON tmp.relation_id = ssr.id
                 INNER JOIN (SELECT *
                             FROM (SELECT * FROM script ORDER BY update_time DESC LIMIT #{countScript}) s
                             GROUP BY script_name, user_name) s ON ssr.script_name = s.script_name
            AND ssr.script_user = s.user_name
        ORDER BY ssr.script_sequence ASC
    </select>

    <select id="selectNotRunningSceneInfo" parameterType="Integer" resultMap="RelationDetailsMap">
        SELECT ssr.id,
               -1 as detail_id,
               s.script_name,
               s.user_name,
               s.submit_info,
               CASE
                   ssr.execution_mode
                   WHEN 0 THEN
                       'local'
                   WHEN 1 THEN
                       'remote'
                   END AS execution_mode,
               ssr.server_ip,
               ssr.server_port,
               ssr.server_user
        FROM (SELECT *
              FROM (SELECT * FROM script ORDER BY update_time DESC LIMIT #{countScript}) s
              GROUP BY script_name, user_name) s,
             scene_script_relation ssr
        WHERE ssr.script_name = s.script_name
          AND ssr.script_user = s.user_name
          AND ssr.scene_id = #{sceneId}
        ORDER BY ssr.script_sequence ASC
    </select>

    <delete id="deleteScene" parameterType="Integer">
        DELETE FROM scene WHERE scene_id in
        <foreach collection="array" item="sceneId" index="index" open="(" close=")" separator=",">
            #{sceneId}
        </foreach>
    </delete>

    <delete id="deleteRelation" parameterType="Integer">
        DELETE FROM scene_script_relation WHERE scene_id in
        <foreach collection="array" item="sceneId" index="index" open="(" close=")" separator=",">
            #{sceneId}
        </foreach>
    </delete>


</mapper>